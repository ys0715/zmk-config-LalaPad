#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define SECONDARY_LAYER 1
#define TERTIARY_LAYER  2
#define SYSTEM_LAYER    3
#define MOUSE_R_LAYER   4
#define SCROLL_R_LAYER  5
#define MOUSE_L_LAYER   6
#define SCROLL_L_LAYER  7

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer MOUSE_R_LAYER 500>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 5>,
            <&zip_temp_layer MOUSE_R_LAYER 500>;
    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 8>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer MOUSE_L_LAYER 500>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 4>,
            <&zip_temp_layer MOUSE_L_LAYER 500>;
    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 6>;
    };
};

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        scroll_down_up: behavior_sensor_rotate_mouse_wheel_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_left_right: behavior_sensor_rotate_mouse_wheel_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };

        scroll_right_left: behavior_sensor_rotate_mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };

        volume_up_down: behavior_sensor_rotate_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
        };

        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "DOT_COMMA";
        };

        pls_minus: pls_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp MINUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "PLS_MINUS";
        };

        allow_pageup: allow_pageup {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&kp PAGE_UP>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEUP";
        };

        allow_pagedown: allow_pagedown {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&kp PAGE_DOWN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEDOWN";
        };

        allow_home: allow_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp HOME>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_HOME";
        };

        allow_end: allow_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp END>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_END";
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        size_up_down: size_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "SIZE_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&kp LG(MINUS)>, <&kp LG(LS(EQUAL))>;
        };

        behavior_volume_down_up: behavior_volume_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "BEHAVIOR_VOLUME_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_DOWN>, <&kp C_VOLUME_UP>;

            tap-ms = <29>;
        };

        move_desktop: move_desktop {
            compatible = "zmk,behavior-sensor-rotate";
            label = "MOVE_DESKTOP";
            #sensor-binding-cells = <0>;
            bindings = <&kp LC(LEFT)>, <&kp LC(RIGHT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cmd_home {
            bindings = <&kp HOME>;
            key-positions = <30 31>;
            layers = <0>;
        };

        cmd_page_down {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <31 32>;
            layers = <0>;
        };

        cmd_page_up {
            bindings = <&kp PAGE_UP>;
            key-positions = <32 33>;
            layers = <0>;
        };

        cmd_end {
            bindings = <&kp END>;
            key-positions = <33 34>;
            layers = <0>;
        };

        cmb_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <9 8>;
            layers = <0>;
        };

        cmd_grave {
            bindings = <&kp GRAVE>;
            key-positions = <9 10>;
            layers = <0>;
        };

        cmd_equal {
            bindings = <&kp EQUAL>;
            key-positions = <6 7>;
            layers = <0>;
        };

        cmd_minus {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        cmd_left_click {
            bindings = <&mkp LCLK>;
            key-positions = <16 17>;
            layers = <0 4>;
        };

        cmd_right_click {
            bindings = <&mkp RCLK>;
            key-positions = <29 28>;
            layers = <0 4>;
        };

        cmd_middle_click {
            bindings = <&mkp MCLK>;
            key-positions = <17 29>;
            layers = <0 4>;
        };

        cmb_enter {
            bindings = <&kp ENTER>;
            key-positions = <29 41>;
            layers = <0>;
        };

        cmd_system_layer {
            bindings = <&mo 3>;
            key-positions = <0 12>;
            layers = <0>;
        };

        cmd_left {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <18 19>;
            layers = <0>;
        };

        cmd_down {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <19 20>;
            layers = <0>;
        };

        cmd_up {
            bindings = <&kp UP_ARROW>;
            key-positions = <20 21>;
            layers = <0>;
        };

        cmd_right {
            bindings = <&kp RIGHT>;
            key-positions = <21 22>;
            layers = <0>;
        };

        cmd_mouse_left_click {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
            layers = <4 6>;
        };

        cmd_mouse_right_click {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
            layers = <4 6>;
        };

        mouse_middle_click {
            bindings = <&mkp MCLK>;
            key-positions = <19 20 21>;
        };

        cmd_scroll_layer_right {
            bindings = <&mo 5>;
            key-positions = <21 22>;
            layers = <4>;
        };

        cmd_scroll_layer_left {
            bindings = <&mo 7>;
            key-positions = <21 22>;
            layers = <6>;
        };

        cmd_ctrl_space {
            bindings = <&kp LC(SPACE)>;
            key-positions = <42 30>;
            layers = <0>;
        };

        cmb_rectangle_layer {
            bindings = <&mo 10>;
            key-positions = <17 41>;
            layers = <0>;
        };
    };

    macros {
        mcr_mcr: mcr_mcr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp N1 &kp N5 &kp N6 &kp N4 &kp Y &kp U>;
            label = "MCR_MCR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&behavior_volume_down_up>, <&scroll_up_down>;

            bindings = <
&kp GRAVE              &kp Q         &kp W         &kp E            &kp R        &kp T                               &kp Y                                 &kp U          &kp I            &kp O          &kp P          &kp SQT
&mt LCTRL TAB          &kp A         &kp S         &kp D            &kp F        &kp G                               &kp H                                 &kp J          &kp K            &kp L          &kp SEMI       &mt RCTRL ENTER
&mt LEFT_SHIFT ESCAPE  &kp Z         &kp X         &kp C            &kp V        &kp B                               &kp N                                 &kp M          &kp COMMA        &kp DOT        &kp SLASH      &mt RSHIFT DELETE
&lt 9 LANGUAGE_2       &kp LEFT_ALT  &kp LEFT_GUI  &mo 8            &kp SPACE    &mt2 LEFT_BRACKET LEFT_PARENTHESIS  &mt2 RIGHT_BRACKET RIGHT_PARENTHESIS  &kp BACKSPACE  &mo 1            &kp RIGHT_GUI  &kp RIGHT_ALT  &lt 2 LANGUAGE_1
                                     &allow_end    &allow_pagedown  &allow_home  &allow_pageup                       &allow_pageup                         &allow_home    &allow_pagedown  &allow_end
            >;
        };

        number_simbol {
            display-name = "secondary_layer";
            sensor-bindings = <&size_up_down>, <&move_desktop>;

            bindings = <
&trans  &kp N1           &kp N2     &kp N3                &kp N4                 &kp N5            &kp N6             &kp N7         &kp N8        &kp N9             &kp N0  &mcr_mcr
&trans  &kp EXCLAMATION  &kp AT     &kp HASH              &kp DOLLAR             &kp PERCENT       &kp CARET          &kp AMPERSAND  &kp ASTERISK  &kp LA(LS(SPACE))  &trans  &trans
&trans  &kp GRAVE        &kp MINUS  &kp EQUAL             &kp BACKSLASH          &kp SQT           &trans             &trans         &trans        &trans             &trans  &trans
&trans  &trans           &trans     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp DEL        &trans        &trans             &trans  &trans
                         &trans     &trans                &trans                 &trans            &trans             &trans         &trans        &trans
            >;
        };

        TERTIARY_LAYER {
            display-name = "tertiary_layer";
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4   &kp F5    &kp F13  &kp F14                    &kp F15               &kp F16  &kp F17  &trans
&trans  &kp F6  &kp F7  &kp F8  &kp F9   &kp F10   &kp F18  &kp F19                    &kp F20               &kp F21  &kp F22  &trans
&trans  &trans  &trans  &trans  &kp F11  &kp F12   &kp F23  &kp F24                    &trans                &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans   &kp CAPS  &trans   &mt2 LG(R) LG(LEFT_ARROW)  &mt2 LG(W) LG(RIGHT)  &trans   &trans   &trans
                &trans  &trans  &trans   &trans    &trans   &trans                     &trans                &trans
            >;
        };

        SYSTEM_LAYER {
            display-name = "system_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans  &sys_reset    &bootloader   &studio_unlock  &bt BT_CLR    &bt BT_CLR_ALL  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans          &trans        &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans          &trans        &trans          &trans
                &trans  &trans  &trans  &trans  &trans        &trans        &trans          &trans
            >;
        };

        MOUSE_R_LAYER {
            display-name = "mouse_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        SCROLL_R_LAYER {
            display-name = "scroll_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        MOUSE_L_LAYER {
            display-name = "mouse_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        SCROLL_L_LAYER {
            display-name = "scroll_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        command {
            bindings = <
&kp ESCAPE            &kp LS(LG(NUMBER_4))  &kp LG(W)  &kp LC(UP_ARROW)  &kp LG(R)              &kp LG(T)      &kp HOME   &kp PAGE_DOWN   &kp PAGE_UP    &kp END    &kp LG(LS(P))  &trans
&trans                &kp LG(A)             &kp LG(S)  &kp LC(DOWN)      &kp LG(F)              &kp LG(LS(T))  &kp LEFT   &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT  &trans         &trans
&trans                &kp LG(Z)             &kp LG(X)  &kp LG(C)         &mt2 LG(LS(V)) LG(V)   &kp LG(LEFT)   &trans     &trans          &trans         &trans     &kp LG(SLASH)  &trans
&kp LS(LA(LEFT_GUI))  &trans                &trans     &trans            &kp LG(LA(BACKSPACE))  &kp LG(RIGHT)  &kp LG(J)  &kp LC(LEFT)    &kp LC(RIGHT)  &trans     &trans         &trans
                                            &trans     &trans            &trans                 &trans         &trans     &trans          &trans         &trans
            >;

            sensor-bindings = <&size_up_down>, <&move_desktop>;
        };

        numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_PLUS   &kp KP_ASTERISK  &kp KP_EQUAL
&trans  &trans  &trans  &trans  &trans  &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS  &kp KP_SLASH     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &dot_comma    &trans           &kp COMMA
&trans  &trans  &trans  &trans  &trans  &trans  &kp COLON        &trans           &kp KP_NUMBER_0  &trans        &trans           &trans
                &trans  &trans  &trans  &trans  &trans           &trans           &trans           &trans
            >;
        };

        rectangle_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp LA(LC(UP_ARROW))    &kp LC(LA(U))          &kp LC(LA(I))      &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LA(LC(DOWN))        &kp LA(LC(J))          &kp LA(LC(K))      &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LA(LC(RIGHT))       &kp LA(LC(D))          &kp LA(LC(F))      &kp LC(LA(G))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LC(LA(LEFT_ARROW))  &kp LA(LC(BACKSPACE))  &kp LA(LC(ENTER))  &trans         &trans  &trans
                &trans  &trans  &trans  &trans  &trans                  &trans                 &trans             &trans
            >;
        };
    };
};
